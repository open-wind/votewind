//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem/Player Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input Actions"",
    ""maps"": [
        {
            ""name"": ""Player Inputs"",
            ""id"": ""8b08a0ee-4ca2-46cd-a236-90ad13c7b450"",
            ""actions"": [
                {
                    ""name"": ""Pinch [Touch]"",
                    ""type"": ""Value"",
                    ""id"": ""132fe9bd-6aa7-4879-a498-011371db3a21"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scroll [Mouse]"",
                    ""type"": ""Value"",
                    ""id"": ""eb87e210-c0b7-4d6a-af0d-da2a525d9c85"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drag [Touch]"",
                    ""type"": ""Value"",
                    ""id"": ""1f7c05de-414f-41bb-bc7f-ede2cac5edec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drag [Mouse]"",
                    ""type"": ""Button"",
                    ""id"": ""3e3b9b39-7ee0-4ad0-9e61-13244bc69ba2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapTouch [Touch]"",
                    ""type"": ""Value"",
                    ""id"": ""59bde16d-1928-4c5e-b8a8-04145ae571e9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TapMouse [Mouse]"",
                    ""type"": ""Value"",
                    ""id"": ""f4e9f8fe-123a-4605-9ffe-1a6ba6c7107b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Two Modifiers"",
                    ""id"": ""5609585d-07bb-4468-8695-b6a6833b3e04"",
                    ""path"": ""TwoModifiers"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch [Touch]"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier1"",
                    ""id"": ""9d673f5d-baa9-40e8-b49b-e60db75f751c"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch [Touch]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""modifier2"",
                    ""id"": ""0beba9bd-6db7-483d-8850-be4b30643ecb"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch [Touch]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""0a2f6ed5-0580-4f1e-b7cd-f5a0a3a25cfc"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch [Touch]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fa5f4385-4272-432c-b864-bc3fb4e2fd58"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll [Mouse]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""38d99aed-4d6d-4cad-9ec3-56c39144c57d"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag [Touch]"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""e2ff2f32-b86c-4d81-bcb0-8d7c8201109a"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag [Touch]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""d0310488-c6eb-47f8-8980-ab267471e940"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag [Touch]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""2dc0b6a3-b81c-4b23-96f1-634d1a04779c"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag [Mouse]"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""2b2013f8-6ccb-42d3-8584-d7d14e06006c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag [Mouse]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""f6654791-389b-4af7-8599-eb8b69f40f9d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag [Mouse]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""080d7fba-c57e-4dde-bc61-5adc2d2ae201"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapTouch [Touch]"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""d8fde13e-9189-4fe2-910d-0e8e35882f75"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapTouch [Touch]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""da531187-9c02-406f-a2d3-41c0923ac595"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapTouch [Touch]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""38c867b7-4cab-43f9-bebd-5bc621f9e3c9"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapMouse [Mouse]"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""ee61f73d-e876-48e8-8d94-8a3f7769c0b3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapMouse [Mouse]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""10559952-7762-4076-a914-4ed6e5efd91c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapMouse [Mouse]"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player Inputs
        m_PlayerInputs = asset.FindActionMap("Player Inputs", throwIfNotFound: true);
        m_PlayerInputs_PinchTouch = m_PlayerInputs.FindAction("Pinch [Touch]", throwIfNotFound: true);
        m_PlayerInputs_ScrollMouse = m_PlayerInputs.FindAction("Scroll [Mouse]", throwIfNotFound: true);
        m_PlayerInputs_DragTouch = m_PlayerInputs.FindAction("Drag [Touch]", throwIfNotFound: true);
        m_PlayerInputs_DragMouse = m_PlayerInputs.FindAction("Drag [Mouse]", throwIfNotFound: true);
        m_PlayerInputs_TapTouchTouch = m_PlayerInputs.FindAction("TapTouch [Touch]", throwIfNotFound: true);
        m_PlayerInputs_TapMouseMouse = m_PlayerInputs.FindAction("TapMouse [Mouse]", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_PlayerInputs.enabled, "This will cause a leak and performance issues, PlayerInputActions.PlayerInputs.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Inputs
    private readonly InputActionMap m_PlayerInputs;
    private List<IPlayerInputsActions> m_PlayerInputsActionsCallbackInterfaces = new List<IPlayerInputsActions>();
    private readonly InputAction m_PlayerInputs_PinchTouch;
    private readonly InputAction m_PlayerInputs_ScrollMouse;
    private readonly InputAction m_PlayerInputs_DragTouch;
    private readonly InputAction m_PlayerInputs_DragMouse;
    private readonly InputAction m_PlayerInputs_TapTouchTouch;
    private readonly InputAction m_PlayerInputs_TapMouseMouse;
    public struct PlayerInputsActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerInputsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PinchTouch => m_Wrapper.m_PlayerInputs_PinchTouch;
        public InputAction @ScrollMouse => m_Wrapper.m_PlayerInputs_ScrollMouse;
        public InputAction @DragTouch => m_Wrapper.m_PlayerInputs_DragTouch;
        public InputAction @DragMouse => m_Wrapper.m_PlayerInputs_DragMouse;
        public InputAction @TapTouchTouch => m_Wrapper.m_PlayerInputs_TapTouchTouch;
        public InputAction @TapMouseMouse => m_Wrapper.m_PlayerInputs_TapMouseMouse;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Add(instance);
            @PinchTouch.started += instance.OnPinchTouch;
            @PinchTouch.performed += instance.OnPinchTouch;
            @PinchTouch.canceled += instance.OnPinchTouch;
            @ScrollMouse.started += instance.OnScrollMouse;
            @ScrollMouse.performed += instance.OnScrollMouse;
            @ScrollMouse.canceled += instance.OnScrollMouse;
            @DragTouch.started += instance.OnDragTouch;
            @DragTouch.performed += instance.OnDragTouch;
            @DragTouch.canceled += instance.OnDragTouch;
            @DragMouse.started += instance.OnDragMouse;
            @DragMouse.performed += instance.OnDragMouse;
            @DragMouse.canceled += instance.OnDragMouse;
            @TapTouchTouch.started += instance.OnTapTouchTouch;
            @TapTouchTouch.performed += instance.OnTapTouchTouch;
            @TapTouchTouch.canceled += instance.OnTapTouchTouch;
            @TapMouseMouse.started += instance.OnTapMouseMouse;
            @TapMouseMouse.performed += instance.OnTapMouseMouse;
            @TapMouseMouse.canceled += instance.OnTapMouseMouse;
        }

        private void UnregisterCallbacks(IPlayerInputsActions instance)
        {
            @PinchTouch.started -= instance.OnPinchTouch;
            @PinchTouch.performed -= instance.OnPinchTouch;
            @PinchTouch.canceled -= instance.OnPinchTouch;
            @ScrollMouse.started -= instance.OnScrollMouse;
            @ScrollMouse.performed -= instance.OnScrollMouse;
            @ScrollMouse.canceled -= instance.OnScrollMouse;
            @DragTouch.started -= instance.OnDragTouch;
            @DragTouch.performed -= instance.OnDragTouch;
            @DragTouch.canceled -= instance.OnDragTouch;
            @DragMouse.started -= instance.OnDragMouse;
            @DragMouse.performed -= instance.OnDragMouse;
            @DragMouse.canceled -= instance.OnDragMouse;
            @TapTouchTouch.started -= instance.OnTapTouchTouch;
            @TapTouchTouch.performed -= instance.OnTapTouchTouch;
            @TapTouchTouch.canceled -= instance.OnTapTouchTouch;
            @TapMouseMouse.started -= instance.OnTapMouseMouse;
            @TapMouseMouse.performed -= instance.OnTapMouseMouse;
            @TapMouseMouse.canceled -= instance.OnTapMouseMouse;
        }

        public void RemoveCallbacks(IPlayerInputsActions instance)
        {
            if (m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputsActions @PlayerInputs => new PlayerInputsActions(this);
    public interface IPlayerInputsActions
    {
        void OnPinchTouch(InputAction.CallbackContext context);
        void OnScrollMouse(InputAction.CallbackContext context);
        void OnDragTouch(InputAction.CallbackContext context);
        void OnDragMouse(InputAction.CallbackContext context);
        void OnTapTouchTouch(InputAction.CallbackContext context);
        void OnTapMouseMouse(InputAction.CallbackContext context);
    }
}
