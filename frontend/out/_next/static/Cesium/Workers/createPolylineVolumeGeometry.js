import{a as e}from"./chunk-GSY3BJ4Q.js";import{a as t}from"./chunk-7Q53UG4E.js";import"./chunk-OFGHX2F3.js";import"./chunk-GT4KWHVH.js";import{a as n,b as o,c as r}from"./chunk-YUGVMPE3.js";import"./chunk-XTBKSAXL.js";import"./chunk-F27AWPUY.js";import{a as i}from"./chunk-PJSC3CZC.js";import"./chunk-VRX6MZUH.js";import"./chunk-EMIRY7IE.js";import{a as a,b as s}from"./chunk-AKNTYFRF.js";import{a as p}from"./chunk-VKBMYYL4.js";import"./chunk-MQ2J7IEP.js";import"./chunk-LHHREGTA.js";import"./chunk-O2LOQWK4.js";import{a as c}from"./chunk-I4PVU2XE.js";import{a as l}from"./chunk-TMRGWDA2.js";import{b as u,c as h,d as m}from"./chunk-OST65WKL.js";import{d as k}from"./chunk-KLPRJ6SC.js";import"./chunk-4PT23TTH.js";import{a as g}from"./chunk-J4RA3VLE.js";import{a as f,c as d,d as y,f as _}from"./chunk-I4JBCTLR.js";import{a as j}from"./chunk-MCEXFPZL.js";import"./chunk-5IUKPU5Q.js";import"./chunk-B3NSNNUV.js";import{a as L}from"./chunk-BOXFFUY5.js";import{e as v}from"./chunk-OVZZEY7C.js";function P(e){let t=(e=e??_.EMPTY_OBJECT).polylinePositions,o=e.shapePositions;if(!v(t))throw new L("options.polylinePositions is required.");if(!v(o))throw new L("options.shapePositions is required.");this._positions=t,this._shape=o,this._ellipsoid=y.clone(e.ellipsoid??y.default),this._cornerType=e.cornerType??n.ROUNDED,this._vertexFormat=i.clone(e.vertexFormat??i.DEFAULT),this._granularity=e.granularity??j.RADIANS_PER_DEGREE,this._workerName="createPolylineVolumeGeometry";let r=1+t.length*f.packedLength;r+=1+o.length*d.packedLength,this.packedLength=r+y.packedLength+i.packedLength+2}P.pack=function(e,t,n){if(!v(e))throw new L("value is required");if(!v(t))throw new L("array is required");n=n??0;let o,r=e._positions,a=r.length;for(t[n++]=a,o=0;o<a;++o,n+=f.packedLength)f.pack(r[o],t,n);let s=e._shape;for(a=s.length,t[n++]=a,o=0;o<a;++o,n+=d.packedLength)d.pack(s[o],t,n);return y.pack(e._ellipsoid,t,n),n+=y.packedLength,i.pack(e._vertexFormat,t,n),n+=i.packedLength,t[n++]=e._cornerType,t[n]=e._granularity,t};var T=y.clone(y.UNIT_SPHERE),E=new i,w={polylinePositions:void 0,shapePositions:void 0,ellipsoid:T,vertexFormat:E,cornerType:void 0,granularity:void 0};P.unpack=function(e,t,n){if(!v(e))throw new L("array is required");t=t??0;let o,r=e[t++],a=Array(r);for(o=0;o<r;++o,t+=f.packedLength)a[o]=f.unpack(e,t);let s=Array(r=e[t++]);for(o=0;o<r;++o,t+=d.packedLength)s[o]=d.unpack(e,t);let p=y.unpack(e,t,T);t+=y.packedLength;let c=i.unpack(e,t,E);t+=i.packedLength;let l=e[t++],u=e[t];return v(n)?(n._positions=a,n._shape=s,n._ellipsoid=y.clone(p,n._ellipsoid),n._vertexFormat=i.clone(c,n._vertexFormat),n._cornerType=l,n._granularity=u,n):(w.polylinePositions=a,w.shapePositions=s,w.cornerType=l,w.granularity=u,new P(w))};var F=new e;P.createGeometry=function(n){let i=p(n._positions,f.equalsEpsilon),d=n._shape;if(d=r.removeDuplicatesFromShape(d),i.length<2||d.length<3)return;s.computeWindingOrder2D(d)===a.CLOCKWISE&&d.reverse();let y=e.fromPoints(d,F);return function(e,n,r,i){let a=new l;i.position&&(a.position=new m({componentDatatype:g.DOUBLE,componentsPerAttribute:3,values:e}));let p=n.length,f=e.length/3,d=(f-2*p)/(2*p),y=s.triangulate(n),_=(d-1)*p*6+2*y.length,j=c.createTypedArray(f,_),L,v,P,T,E,w,F=2*p,A=0;for(L=0;L<d-1;L++){for(v=0;v<p-1;v++)w=(P=2*v+L*p*2)+F,E=(T=P+1)+F,j[A++]=T,j[A++]=P,j[A++]=E,j[A++]=E,j[A++]=P,j[A++]=w;E=(T=(P=2*p-2+L*p*2)+1)+F,w=P+F,j[A++]=T,j[A++]=P,j[A++]=E,j[A++]=E,j[A++]=P,j[A++]=w}if(i.st||i.tangent||i.bitangent){let e=new Float32Array(2*f),t=1/(d-1),o=1/r.height,i=r.height/2,s,c,l=0;for(L=0;L<d;L++){for(s=L*t,c=o*(n[0].y+i),e[l++]=s,e[l++]=c,v=1;v<p;v++)c=o*(n[v].y+i),e[l++]=s,e[l++]=c,e[l++]=s,e[l++]=c;c=o*(n[0].y+i),e[l++]=s,e[l++]=c}for(v=0;v<p;v++)s=0,c=o*(n[v].y+i),e[l++]=s,e[l++]=c;for(v=0;v<p;v++)s=(d-1)*t,c=o*(n[v].y+i),e[l++]=s,e[l++]=c;a.st=new m({componentDatatype:g.FLOAT,componentsPerAttribute:2,values:new Float32Array(e)})}let b=f-2*p;for(L=0;L<y.length;L+=3){let e=y[L]+b,t=y[L+1]+b,n=y[L+2]+b;j[A++]=e,j[A++]=t,j[A++]=n,j[A++]=n+p,j[A++]=t+p,j[A++]=e+p}let R=new h({attributes:a,indices:j,boundingSphere:k.fromVertices(e),primitiveType:u.TRIANGLES});if(i.normal&&(R=t.computeNormal(R)),i.tangent||i.bitangent){try{R=t.computeTangentAndBitangent(R)}catch{o("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}i.tangent||(R.attributes.tangent=void 0),i.bitangent||(R.attributes.bitangent=void 0),i.st||(R.attributes.st=void 0)}return R}(r.computePositions(i,d,y,n,!0),d,y,n._vertexFormat)};var A=function(e,t){return v(t)&&(e=P.unpack(e,t)),e._ellipsoid=y.clone(e._ellipsoid),P.createGeometry(e)};export{A as default};