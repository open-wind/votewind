import{a as t}from"./chunk-HNJRTQHB.js";import{a as e}from"./chunk-PJSC3CZC.js";import{a as i}from"./chunk-I4PVU2XE.js";import{a as n}from"./chunk-TMRGWDA2.js";import{b as a,c as r,d as o}from"./chunk-OST65WKL.js";import{d as m}from"./chunk-KLPRJ6SC.js";import{a as s}from"./chunk-J4RA3VLE.js";import{a as c,c as u,d as l,f as f}from"./chunk-I4JBCTLR.js";import{a as p}from"./chunk-MCEXFPZL.js";import{a as h}from"./chunk-BOXFFUY5.js";import{e as _}from"./chunk-OVZZEY7C.js";var d,k=new c,y=new c,A=new c,C=new c,w=new c,P=new c(1,1,1),x=Math.cos,v=Math.sin;function b(t){let i=(t=t??f.EMPTY_OBJECT).radii??P,n=t.innerRadii??i,a=t.minimumClock??0,r=t.maximumClock??p.TWO_PI,o=t.minimumCone??0,m=t.maximumCone??p.PI,s=Math.round(t.stackPartitions??64),u=Math.round(t.slicePartitions??64),l=t.vertexFormat??e.DEFAULT;if(u<3)throw new h("options.slicePartitions cannot be less than three.");if(s<3)throw new h("options.stackPartitions cannot be less than three.");this._radii=c.clone(i),this._innerRadii=c.clone(n),this._minimumClock=a,this._maximumClock=r,this._minimumCone=o,this._maximumCone=m,this._stackPartitions=s,this._slicePartitions=u,this._vertexFormat=e.clone(l),this._offsetAttribute=t.offsetAttribute,this._workerName="createEllipsoidGeometry"}b.packedLength=2*c.packedLength+e.packedLength+7,b.pack=function(t,i,n){if(!_(t))throw new h("value is required");if(!_(i))throw new h("array is required");return n=n??0,c.pack(t._radii,i,n),n+=c.packedLength,c.pack(t._innerRadii,i,n),n+=c.packedLength,e.pack(t._vertexFormat,i,n),n+=e.packedLength,i[n++]=t._minimumClock,i[n++]=t._maximumClock,i[n++]=t._minimumCone,i[n++]=t._maximumCone,i[n++]=t._stackPartitions,i[n++]=t._slicePartitions,i[n]=t._offsetAttribute??-1,i};var g=new c,L=new c,T=new e,F={radii:g,innerRadii:L,vertexFormat:T,minimumClock:void 0,maximumClock:void 0,minimumCone:void 0,maximumCone:void 0,stackPartitions:void 0,slicePartitions:void 0,offsetAttribute:void 0};b.unpack=function(t,i,n){if(!_(t))throw new h("array is required");i=i??0;let a=c.unpack(t,i,g);i+=c.packedLength;let r=c.unpack(t,i,L);i+=c.packedLength;let o=e.unpack(t,i,T);i+=e.packedLength;let m=t[i++],s=t[i++],u=t[i++],l=t[i++],f=t[i++],p=t[i++],d=t[i];return _(n)?(n._radii=c.clone(a,n._radii),n._innerRadii=c.clone(r,n._innerRadii),n._vertexFormat=e.clone(o,n._vertexFormat),n._minimumClock=m,n._maximumClock=s,n._minimumCone=u,n._maximumCone=l,n._stackPartitions=f,n._slicePartitions=p,n._offsetAttribute=-1===d?void 0:d,n):(F.minimumClock=m,F.maximumClock=s,F.minimumCone=u,F.maximumCone=l,F.stackPartitions=f,F.slicePartitions=p,F.offsetAttribute=-1===d?void 0:d,new b(F))},b.createGeometry=function(e){let f,h,d,P,b=e._radii;if(b.x<=0||b.y<=0||b.z<=0)return;let g=e._innerRadii;if(g.x<=0||g.y<=0||g.z<=0)return;let L=e._minimumClock,T=e._maximumClock,F=e._minimumCone,O=e._maximumCone,I=e._vertexFormat,E=e._slicePartitions+1,M=e._stackPartitions+1;E=Math.round(E*Math.abs(T-L)/p.TWO_PI),M=Math.round(M*Math.abs(O-F)/p.PI),E<2&&(E=2),M<2&&(M=2);let R,z,N=0,j=[F],D=[L];for(R=0;R<M;R++)j.push(F+R*(O-F)/(M-1));for(j.push(O),z=0;z<E;z++)D.push(L+z*(T-L)/(E-1));D.push(T);let U=j.length,S=D.length,B=0,G=1,J=g.x!==b.x||g.y!==b.y||g.z!==b.z,W=!1,Y=!1,Z=!1;J&&(G=2,F>0&&(W=!0,B+=E-1),O<Math.PI&&(Y=!0,B+=E-1),(T-L)%p.TWO_PI?(Z=!0,B+=(M-1)*2+1):B+=1);let X=S*U*G,q=new Float64Array(3*X),K=Array(X).fill(!1),V=Array(X).fill(!1),H=E*M*G,Q=6*(H+B+1-(E+M)*G),$=i.createTypedArray(H,Q),tt=I.normal?new Float32Array(3*X):void 0,te=I.tangent?new Float32Array(3*X):void 0,ti=I.bitangent?new Float32Array(3*X):void 0,tn=I.st?new Float32Array(2*X):void 0,ta=Array(U),tr=Array(U);for(R=0;R<U;R++)ta[R]=v(j[R]),tr[R]=x(j[R]);let to=Array(S),tm=Array(S);for(z=0;z<S;z++)tm[z]=x(D[z]),to[z]=v(D[z]);for(R=0;R<U;R++)for(z=0;z<S;z++)q[N++]=b.x*ta[R]*tm[z],q[N++]=b.y*ta[R]*to[z],q[N++]=b.z*tr[R];let ts=X/2;if(J)for(R=0;R<U;R++)for(z=0;z<S;z++)q[N++]=g.x*ta[R]*tm[z],q[N++]=g.y*ta[R]*to[z],q[N++]=g.z*tr[R],K[ts]=!0,R>0&&R!==U-1&&0!==z&&z!==S-1&&(V[ts]=!0),ts++;for(R=1,N=0;R<U-2;R++)for(f=R*S,h=(R+1)*S,z=1;z<S-2;z++)$[N++]=h+z,$[N++]=h+z+1,$[N++]=f+z+1,$[N++]=h+z,$[N++]=f+z+1,$[N++]=f+z;if(J){let t=U*S;for(R=1;R<U-2;R++)for(f=t+R*S,h=t+(R+1)*S,z=1;z<S-2;z++)$[N++]=h+z,$[N++]=f+z,$[N++]=f+z+1,$[N++]=h+z,$[N++]=f+z+1,$[N++]=h+z+1}if(J){if(W)for(P=U*S,R=1;R<S-2;R++)$[N++]=R,$[N++]=R+1,$[N++]=P+R+1,$[N++]=R,$[N++]=P+R+1,$[N++]=P+R;if(Y)for(d=U*S-S,P=U*S*G-S,R=1;R<S-2;R++)$[N++]=d+R+1,$[N++]=d+R,$[N++]=P+R,$[N++]=d+R+1,$[N++]=P+R,$[N++]=P+R+1}if(Z){for(R=1;R<U-2;R++)P=S*U+S*R,d=S*R,$[N++]=P,$[N++]=d+S,$[N++]=d,$[N++]=P,$[N++]=P+S,$[N++]=d+S;for(R=1;R<U-2;R++)P=S*U+S*(R+1)-1,d=S*(R+1)-1,$[N++]=d+S,$[N++]=P,$[N++]=d,$[N++]=d+S,$[N++]=P+S,$[N++]=P}let tc=new n;I.position&&(tc.position=new o({componentDatatype:s.DOUBLE,componentsPerAttribute:3,values:q}));let tu=0,tl=0,tf=0,tp=0,th=X/2,t_,td=l.fromCartesian3(b),tk=l.fromCartesian3(g);if(I.st||I.normal||I.tangent||I.bitangent){for(R=0;R<X;R++){t_=K[R]?tk:td;let t=c.fromArray(q,3*R,k),e=t_.geodeticSurfaceNormal(t,y);if(V[R]&&c.negate(e,e),I.st){let t=u.negate(e,w);tn[tu++]=Math.atan2(t.y,t.x)/p.TWO_PI+.5,tn[tu++]=Math.asin(e.z)/Math.PI+.5}if(I.normal&&(tt[tl++]=e.x,tt[tl++]=e.y,tt[tl++]=e.z),I.tangent||I.bitangent){let t=0,i;if(K[R]&&(t=th),i=!W&&R>=t&&R<t+2*S?c.UNIT_X:c.UNIT_Z,c.cross(i,e,A),c.normalize(A,A),I.tangent&&(te[tf++]=A.x,te[tf++]=A.y,te[tf++]=A.z),I.bitangent){let t=c.cross(e,A,C);c.normalize(t,t),ti[tp++]=t.x,ti[tp++]=t.y,ti[tp++]=t.z}}}I.st&&(tc.st=new o({componentDatatype:s.FLOAT,componentsPerAttribute:2,values:tn})),I.normal&&(tc.normal=new o({componentDatatype:s.FLOAT,componentsPerAttribute:3,values:tt})),I.tangent&&(tc.tangent=new o({componentDatatype:s.FLOAT,componentsPerAttribute:3,values:te})),I.bitangent&&(tc.bitangent=new o({componentDatatype:s.FLOAT,componentsPerAttribute:3,values:ti}))}if(_(e._offsetAttribute)){let i=q.length,n=e._offsetAttribute===t.NONE?0:1,a=new Uint8Array(i/3).fill(n);tc.applyOffset=new o({componentDatatype:s.UNSIGNED_BYTE,componentsPerAttribute:1,values:a})}return new r({attributes:tc,indices:$,primitiveType:a.TRIANGLES,boundingSphere:m.fromEllipsoid(td),offsetAttribute:e._offsetAttribute})},b.getUnitEllipsoid=function(){return _(d)||(d=b.createGeometry(new b({radii:new c(1,1,1),vertexFormat:e.POSITION_ONLY}))),d};var O=b;export{O as a};