import{a as e}from"./chunk-HJ6M6NKU.js";import{a as t}from"./chunk-4KTYBIT7.js";import{a as o}from"./chunk-XTBKSAXL.js";import"./chunk-F27AWPUY.js";import"./chunk-MQ2J7IEP.js";import"./chunk-LHHREGTA.js";import"./chunk-O2LOQWK4.js";import{a as r}from"./chunk-I4PVU2XE.js";import{a as a}from"./chunk-TMRGWDA2.js";import{b as n,c as i,d as l}from"./chunk-OST65WKL.js";import{d as s}from"./chunk-KLPRJ6SC.js";import"./chunk-4PT23TTH.js";import{a as p}from"./chunk-J4RA3VLE.js";import{a as c,d as h,f as u}from"./chunk-I4JBCTLR.js";import{a as f}from"./chunk-MCEXFPZL.js";import"./chunk-5IUKPU5Q.js";import"./chunk-B3NSNNUV.js";import{a as y}from"./chunk-BOXFFUY5.js";import{e as m}from"./chunk-OVZZEY7C.js";function d(o){let r=(o=o??u.EMPTY_OBJECT).positions,a=o.colors,n=o.colorsPerVertex??!1;if(!m(r)||r.length<2)throw new y("At least two positions are required.");if(m(a)&&(n&&a.length<r.length||!n&&a.length<r.length-1))throw new y("colors has an invalid length.");this._positions=r,this._colors=a,this._colorsPerVertex=n,this._arcType=o.arcType??t.GEODESIC,this._granularity=o.granularity??f.RADIANS_PER_DEGREE,this._ellipsoid=o.ellipsoid??h.default,this._workerName="createSimplePolylineGeometry";let i=1+r.length*c.packedLength;i+=m(a)?1+a.length*e.packedLength:1,this.packedLength=i+h.packedLength+3}d.pack=function(t,o,r){if(!m(t))throw new y("value is required");if(!m(o))throw new y("array is required");r=r??0;let a,n=t._positions,i=n.length;for(o[r++]=i,a=0;a<i;++a,r+=c.packedLength)c.pack(n[a],o,r);let l=t._colors;for(i=m(l)?l.length:0,o[r++]=i,a=0;a<i;++a,r+=e.packedLength)e.pack(l[a],o,r);return h.pack(t._ellipsoid,o,r),r+=h.packedLength,o[r++]=t._colorsPerVertex?1:0,o[r++]=t._arcType,o[r]=t._granularity,o},d.unpack=function(t,o,r){if(!m(t))throw new y("array is required");o=o??0;let a,n=t[o++],i=Array(n);for(a=0;a<n;++a,o+=c.packedLength)i[a]=c.unpack(t,o);let l=(n=t[o++])>0?Array(n):void 0;for(a=0;a<n;++a,o+=e.packedLength)l[a]=e.unpack(t,o);let s=h.unpack(t,o);o+=h.packedLength;let p=1===t[o++],u=t[o++],f=t[o];return m(r)?(r._positions=i,r._colors=l,r._ellipsoid=s,r._colorsPerVertex=p,r._arcType=u,r._granularity=f,r):new d({positions:i,colors:l,ellipsoid:s,colorsPerVertex:p,arcType:u,granularity:f})};var g=[,,],T=[,,],k={positions:g,height:T,ellipsoid:void 0,minDistance:void 0,granularity:void 0};d.createGeometry=function(h){let u=h._positions,y=h._colors,d=h._colorsPerVertex,B=h._arcType,_=h._granularity,E=h._ellipsoid,w=f.chordLength(_,E.maximumRadius),L=m(y)&&!d,P,A=u.length,j,b,O,D,R=0;if(B===t.GEODESIC||B===t.RHUMB){let r,a,n;B===t.GEODESIC?(r=f.chordLength(_,E.maximumRadius),a=o.numberOfPoints,n=o.generateArc):(r=_,a=o.numberOfPointsRhumbLine,n=o.generateRhumbArc);let i=o.extractHeights(u,E);if(B===t.GEODESIC?k.minDistance=w:k.granularity=_,k.ellipsoid=E,L){let t=0;for(P=0;P<A-1;P++)t+=a(u[P],u[P+1],r)+1;j=new Float64Array(3*t),O=new Uint8Array(4*t),k.positions=g,k.height=T;let o=0;for(P=0;P<A-1;++P){g[0]=u[P],g[1]=u[P+1],T[0]=i[P],T[1]=i[P+1];let t=n(k);if(m(y)){let r=t.length/3;D=y[P];for(let t=0;t<r;++t)O[o++]=e.floatToByte(D.red),O[o++]=e.floatToByte(D.green),O[o++]=e.floatToByte(D.blue),O[o++]=e.floatToByte(D.alpha)}j.set(t,R),R+=t.length}}else if(k.positions=u,k.height=i,j=new Float64Array(n(k)),m(y)){for(O=new Uint8Array(j.length/3*4),P=0;P<A-1;++P)R=function(t,r,a,n,i,l,s){let p=o.numberOfPoints(t,r,i),c,h=a.red,u=a.green,f=a.blue,y=a.alpha,m=n.red,d=n.green,g=n.blue,T=n.alpha;if(e.equals(a,n)){for(c=0;c<p;c++)l[s++]=e.floatToByte(h),l[s++]=e.floatToByte(u),l[s++]=e.floatToByte(f),l[s++]=e.floatToByte(y);return s}let k=(m-h)/p,B=(d-u)/p,_=(g-f)/p,E=(T-y)/p,w=s;for(c=0;c<p;c++)l[w++]=e.floatToByte(h+c*k),l[w++]=e.floatToByte(u+c*B),l[w++]=e.floatToByte(f+c*_),l[w++]=e.floatToByte(y+c*E);return w}(u[P],u[P+1],y[P],y[P+1],w,O,R);let t=y[A-1];O[R++]=e.floatToByte(t.red),O[R++]=e.floatToByte(t.green),O[R++]=e.floatToByte(t.blue),O[R++]=e.floatToByte(t.alpha)}}else{j=new Float64Array(3*(b=L?2*A-2:A)),O=m(y)?new Uint8Array(4*b):void 0;let t=0,o=0;for(P=0;P<A;++P){let r=u[P];if(L&&P>0&&(c.pack(r,j,t),t+=3,D=y[P-1],O[o++]=e.floatToByte(D.red),O[o++]=e.floatToByte(D.green),O[o++]=e.floatToByte(D.blue),O[o++]=e.floatToByte(D.alpha)),L&&P===A-1)break;c.pack(r,j,t),t+=3,m(y)&&(D=y[P],O[o++]=e.floatToByte(D.red),O[o++]=e.floatToByte(D.green),O[o++]=e.floatToByte(D.blue),O[o++]=e.floatToByte(D.alpha))}}let S=new a;S.position=new l({componentDatatype:p.DOUBLE,componentsPerAttribute:3,values:j}),m(y)&&(S.color=new l({componentDatatype:p.UNSIGNED_BYTE,componentsPerAttribute:4,values:O,normalize:!0}));let U=((b=j.length/3)-1)*2,v=r.createTypedArray(b,U),I=0;for(P=0;P<b-1;++P)v[I++]=P,v[I++]=P+1;return new i({attributes:S,indices:v,primitiveType:n.LINES,boundingSphere:s.fromPoints(u)})};var B=function(e,t){return m(t)&&(e=d.unpack(e,t)),e._ellipsoid=h.clone(e._ellipsoid),d.createGeometry(e)};export{B as default};