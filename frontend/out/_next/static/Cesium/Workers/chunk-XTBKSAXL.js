import{a as e}from"./chunk-F27AWPUY.js";import{a as t}from"./chunk-MQ2J7IEP.js";import{b as r}from"./chunk-LHHREGTA.js";import{a as a}from"./chunk-O2LOQWK4.js";import{b as n}from"./chunk-4PT23TTH.js";import{a as i,b as o,d as l}from"./chunk-I4JBCTLR.js";import{a as c}from"./chunk-MCEXFPZL.js";import{a as s}from"./chunk-BOXFFUY5.js";import{e as u}from"./chunk-OVZZEY7C.js";var h={};h.numberOfPoints=function(e,t,r){return Math.ceil(i.distance(e,t)/r)},h.numberOfPointsRhumbLine=function(e,t,r){return Math.max(1,Math.ceil(Math.sqrt((Math.pow(e.longitude-t.longitude,2)+Math.pow(e.latitude-t.latitude,2))/(r*r))))};var f=new o;h.extractHeights=function(e,t){let r=e.length,a=Array(r);for(let n=0;n<r;n++){let r=e[n];a[n]=t.cartesianToCartographic(r,f).height}return a};var g=new n,p=new i,m=new i,d=new a(i.UNIT_X,0),T=new i,w=new a(i.UNIT_X,0),y=new i,A=new i,P=[];function C(e,t,r){let a;if(P.length=e,t===r){for(a=0;a<e;a++)P[a]=t;return P}let n=(r-t)/e;for(a=0;a<e;a++){let e=t+a*n;P[a]=e}return P}var k=new o,E=new o,R=new i,b=new i,S=new i,D=new e,N=new t;h.wrapLongitude=function(e,t){let o=[],l=[];if(u(e)&&e.length>0){t=t??n.IDENTITY;let c=n.inverseTransformation(t,g),s=n.multiplyByPoint(c,i.ZERO,p),h=i.normalize(n.multiplyByPointAsVector(c,i.UNIT_Y,m),m),f=a.fromPointNormal(s,h,d),P=i.normalize(n.multiplyByPointAsVector(c,i.UNIT_X,T),T),C=a.fromPointNormal(s,P,w),k=1;o.push(i.clone(e[0]));let E=o[0],R=e.length;for(let t=1;t<R;++t){let n=e[t];if(0>a.getPointDistance(C,E)||0>a.getPointDistance(C,n)){let e=r.lineSegmentPlane(E,n,f,y);if(u(e)){let t=i.multiplyByScalar(h,5e-9,A);0>a.getPointDistance(f,E)&&i.negate(t,t),o.push(i.add(e,t,new i)),l.push(k+1),i.negate(t,t),o.push(i.add(e,t,new i)),k=1}}o.push(i.clone(e[t])),k++,E=n}l.push(k)}return{positions:o,lengths:l}},h.generateArc=function(e){u(e)||(e={});let t=e.positions;if(!u(t))throw new s("options.positions is required.");let r=t.length,a=e.ellipsoid??l.default,n=e.height??0,o=Array.isArray(n);if(r<1)return[];if(1===r){let e=a.scaleToGeodeticSurface(t[0],b);if(0!==(n=o?n[0]:n)){let t=a.geodeticSurfaceNormal(e,R);i.multiplyByScalar(t,n,t),i.add(e,t,e)}return[e.x,e.y,e.z]}let f=e.minDistance;if(!u(f)){let t=e.granularity??c.RADIANS_PER_DEGREE;f=c.chordLength(t,a.maximumRadius)}let g=0,p;for(p=0;p<r-1;p++)g+=h.numberOfPoints(t[p],t[p+1],f);let m=(g+1)*3,d=Array(m),T=0;for(p=0;p<r-1;p++)T=function(e,t,r,a,n,o,l,c){let s=a.scaleToGeodeticSurface(e,b),u=a.scaleToGeodeticSurface(t,S),f=h.numberOfPoints(e,t,r),g=a.cartesianToCartographic(s,k),p=a.cartesianToCartographic(u,E),m=C(f,n,o);D.setEndPoints(g,p);let d=D.surfaceDistance/f,T=c;g.height=n;let w=a.cartographicToCartesian(g,R);i.pack(w,l,T),T+=3;for(let e=1;e<f;e++){let t=D.interpolateUsingSurfaceDistance(e*d,E);t.height=m[e],w=a.cartographicToCartesian(t,R),i.pack(w,l,T),T+=3}return T}(t[p],t[p+1],f,a,o?n[p]:n,o?n[p+1]:n,d,T);P.length=0;let w=t[r-1],y=a.cartesianToCartographic(w,k);y.height=o?n[r-1]:n;let A=a.cartographicToCartesian(y,R);return i.pack(A,d,m-3),d};var O=new o,I=new o;h.generateRhumbArc=function(e){u(e)||(e={});let r=e.positions;if(!u(r))throw new s("options.positions is required.");let a=r.length,n=e.ellipsoid??l.default,f=e.height??0,g=Array.isArray(f);if(a<1)return[];if(1===a){let e=n.scaleToGeodeticSurface(r[0],b);if(0!==(f=g?f[0]:f)){let t=n.geodeticSurfaceNormal(e,R);i.multiplyByScalar(t,f,t),i.add(e,t,e)}return[e.x,e.y,e.z]}let p=e.granularity??c.RADIANS_PER_DEGREE,m=0,d,T=n.cartesianToCartographic(r[0],O),w;for(d=0;d<a-1;d++)w=n.cartesianToCartographic(r[d+1],I),m+=h.numberOfPointsRhumbLine(T,w,p),T=o.clone(w,O);let y=(m+1)*3,A=Array(y),S=0;for(d=0;d<a-1;d++)S=function(e,r,a,n,o,l,c,s){let u=n.cartesianToCartographic(e,k),f=n.cartesianToCartographic(r,E),g=h.numberOfPointsRhumbLine(u,f,a);u.height=0,f.height=0;let p=C(g,o,l);N.ellipsoid.equals(n)||(N=new t(void 0,void 0,n)),N.setEndPoints(u,f);let m=N.surfaceDistance/g,d=s;u.height=o;let T=n.cartographicToCartesian(u,R);i.pack(T,c,d),d+=3;for(let e=1;e<g;e++){let t=N.interpolateUsingSurfaceDistance(e*m,E);t.height=p[e],T=n.cartographicToCartesian(t,R),i.pack(T,c,d),d+=3}return d}(r[d],r[d+1],p,n,g?f[d]:f,g?f[d+1]:f,A,S);P.length=0;let D=r[a-1],j=n.cartesianToCartographic(D,k);j.height=g?f[a-1]:f;let v=n.cartographicToCartesian(j,R);return i.pack(v,A,y-3),A},h.generateCartesianArc=function(e){let t=h.generateArc(e),r=t.length/3,a=Array(r);for(let e=0;e<r;e++)a[e]=i.unpack(t,3*e);return a},h.generateCartesianRhumbArc=function(e){let t=h.generateRhumbArc(e),r=t.length/3,a=Array(r);for(let e=0;e<r;e++)a[e]=i.unpack(t,3*e);return a};var j=h;export{j as a};